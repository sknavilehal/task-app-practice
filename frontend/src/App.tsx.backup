import React, { useState, useEffect } from 'react';
import './App.css';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost';

interface Task {
  id: number;
  title: string;
  description: string;
  status: string;
  priority: string;
  userId: number;
  createdAt: string;
  updatedAt: string;
}

function App() {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [newTask, setNewTask] = useState({ title: '', description: '' });
  const [error, setError] = useState('');

  useEffect(() => {
    fetchTasks();
  }, []);

  const fetchTasks = async () => {
    try {
      console.log('Fetching tasks from:', `${API_URL}/api/v1/test-tasks`);
      const response = await fetch(`${API_URL}/api/v1/test-tasks`);
      console.log('Response status:', response.status);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('Response data:', data);
      
      // Handle different response formats
      const tasksList = data.tasks || data || [];
      if (Array.isArray(tasksList)) {
        setTasks(tasksList);
      } else {
        console.warn('Expected array of tasks, got:', typeof tasksList, tasksList);
        setTasks([]);
      }
    } catch (error) {
      console.error('Error fetching tasks:', error);
      setTasks([]);
      setError(`Failed to fetch tasks: ${error.message}`);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await fetch(`${API_URL}/api/v1/demo-tasks`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newTask),
      });
      
      // For demo, add the task locally with a new ID
      const newTaskWithId: Task = {
        id: Date.now(), // Simple ID generation for demo
        title: newTask.title,
        description: newTask.description,
        status: 'pending',
        priority: 'medium',
        userId: 1,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      setTasks([...tasks, newTaskWithId]);
      setNewTask({ title: '', description: '' });
    } catch (error) {
      console.error('Error creating task:', error);
      setError(`Failed to create task: ${error.message}`);
    }
  };

  const handleComplete = async (taskId: number) => {
    try {
      await fetch(`${API_URL}/api/v1/demo-tasks/${taskId}/complete`, {
        method: 'PATCH',
      });
      
      // For demo, update the task locally
      setTasks(tasks.map(task => 
        task.id === taskId 
          ? { ...task, status: task.status === 'completed' ? 'pending' : 'completed' }
          : task
      ));
    } catch (error) {
      console.error('Error completing task:', error);
      setError(`Failed to update task: ${error.message}`);
    }
  };

  const handleDelete = async (taskId: number) => {
    try {
      await fetch(`${API_URL}/api/v1/demo-tasks/${taskId}`, {
        method: 'DELETE',
      });
      
      // For demo, remove the task locally
      setTasks(tasks.filter(task => task.id !== taskId));
    } catch (error) {
      console.error('Error deleting task:', error);
      setError(`Failed to delete task: ${error.message}`);
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Task Manager</h1>
        <p>Manage your daily tasks efficiently</p>
      </header>

      <main>
        <section className="task-form">
          <h2>Add New Task</h2>
          <form onSubmit={handleSubmit}>
            <input
              type="text"
              placeholder="Task title"
              value={newTask.title}
              onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
              required
            />
            <textarea
              placeholder="Task description"
              value={newTask.description}
              onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
            />
            <button type="submit">Add Task</button>
          </form>
        </section>

        <section className="task-list">
          <h2>Your Tasks</h2>
          {error && (
            <div className="error-message" style={{color: 'red', marginBottom: '10px'}}>
              {error}
            </div>
          )}
          {tasks.length === 0 ? (
            <p>No tasks yet. Add one above!</p>
          ) : (
            <ul>
              {tasks.map((task) => (
                <li key={task.id} className={task.status === 'completed' ? 'completed' : ''}>
                  <div className="task-content">
                    <h3>{task.title}</h3>
                    <p>{task.description}</p>
                    <small>Created: {new Date(task.createdAt).toLocaleDateString()}</small>
                    <span className={`status-badge ${task.status}`}>
                      {task.status}
                    </span>
                  </div>
                  <div className="task-actions">
                    <button
                      onClick={() => handleComplete(task.id)}
                      className={`complete-btn ${task.status === 'completed' ? 'completed' : ''}`}
                    >
                      {task.status === 'completed' ? 'âœ“ Completed' : 'Mark Complete'}
                    </button>
                    <button
                      onClick={() => handleDelete(task.id)}
                      className="delete-btn"
                    >
                      Delete
                    </button>
                  </div>
                </li>
              ))}
            </ul>
          )}
        </section>
      </main>
    </div>
  );
}

export default App; 