name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: 
      name: staging
      url: https://staging.yourdomain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your staging deployment commands here
          # For example, updating Kubernetes manifests or triggering a deployment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: 
      name: production
      url: https://yourdomain.com
    needs: []

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add your production deployment commands here
          
      # Example Kubernetes deployment
      - name: Deploy to Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "Setting up kubectl"
          mkdir -p ~/.kube
          echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
          
          # Update image tags in Kubernetes manifests
          TAG=${GITHUB_REF#refs/tags/}
          sed -i "s|image:.*backend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:$TAG|g" kubernetes/backend-deployment.yaml
          sed -i "s|image:.*frontend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:$TAG|g" kubernetes/frontend-deployment.yaml
          
          # Apply the manifests
          kubectl apply -f kubernetes/
          
          # Wait for rollout to complete
          kubectl rollout status deployment/backend-deployment
          kubectl rollout status deployment/frontend-deployment

  # Health check after deployment
  health-check:
    name: Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Wait for deployment
        run: sleep 60

      - name: Check application health
        run: |
          # Add health check endpoints
          curl -f https://yourdomain.com/api/health || exit 1
          curl -f https://yourdomain.com/ || exit 1
          echo "Health checks passed!"
